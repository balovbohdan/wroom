module.exports = {
  plugins: ['@ionic'],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: './tsconfig.json',
    ecmaFeatures: {
      jsx: true,
    },
  },
  env: {
    es6: true,
    node: true,
    browser: true,
  },
  settings: {
    react: {
      version: 'detect',
    },
  },
  extends: [
    'plugin:@ionic/recommended',
    'react-app',
    'plugin:react/recommended',
    'plugin:jsx-a11y/recommended',
    'plugin:import/errors',
    'plugin:jest/recommended',
    'plugin:unicorn/recommended',
    'eslint-config-airbnb'
  ],
  plugins: [
    'eslint-plugin-react',
    'eslint-plugin-jsx-a11y',
    'eslint-plugin-import',
    'eslint-plugin-graphql',
    'eslint-plugin-jest',
    'eslint-plugin-unicorn',
    'eslint-plugin-react-hooks',
  ],
  rules: {
    semi: 'error',
    'no-debugger': 'warn',
    'no-else-return': 'off',
    'keyword-spacing': 'error',
    'quotes': ['error', 'single'],
    'space-before-blocks': 'error',
    'no-negated-condition': 'error',
    'no-underscore-dangle': 'error',
    'eol-last': ['error', 'always'],
    'require-atomic-updates': 'error',
    'arrow-parens': ['error', 'always'],
    'jsx-quotes': ['error', 'prefer-double'],
    'operator-linebreak': ['error', 'after'],
    'array-bracket-spacing': ['error', 'never'],
    'object-curly-spacing': ['error', 'always'],
    'array-bracket-newline': ['error', 'consistent'],
    'quote-props': ['error', 'consistent-as-needed'],
    'no-confusing-arrow': ['error', { allowParens: true }],
    'object-curly-newline': ['error', { consistent: true }],
    'no-restricted-syntax': ['error', 'ExportAllDeclaration'],
    'arrow-spacing': ['error', { before: true, after: true }],
    'no-console': ['warn', { allow: ['warn', 'error', 'info'] }],
    'no-mixed-operators': ['error', { allowSamePrecedence: true }],
    'no-multiple-empty-lines': ['error', { max: 1, maxEOF: 0, maxBOF: 0 }],
    'lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],
    'no-unused-expressions': ['error', {
      allowShortCircuit: true,
      allowTernary: true,
    }],
    'max-len': ['error', {
      code: 120,
      tabWidth: 2,
      ignoreUrls: true,
      ignoreStrings: true,
      ignoreRegExpLiterals: true,
      ignoreTemplateLiterals: true,
    }],
    'padding-line-between-statements': ['error',
      { blankLine: 'always', prev: '*', next: 'return' },
      { blankLine: 'always', prev: ['const', 'let', 'var'], next: '*' },
      { blankLine: 'any', prev: ['const', 'let', 'var'], next: ['const', 'let', 'var'] },
    ],

    'react/jsx-no-bind': 'error',
    'react/jsx-indent': ['error', 2],
    'react/jsx-no-duplicate-props': 'error',
    'react/jsx-one-expression-per-line': 'off',
    'react/jsx-filename-extension': ['error', { extensions: ['.tsx'] }],
    'react/forbid-prop-types': ['error', { forbid: ['any', 'array'] }],
    'react/jsx-fragments': ['error', 'element'],
    'react/state-in-constructor': ['error', 'never'],
    'react/static-property-placement': ['error', 'static public field'],
    'react/jsx-props-no-spreading': 'off',
    'react/require-default-props': ['error', { forbidDefaultForRequired: true }],
    'react/no-did-mount-set-state': 'off',
    'react/no-did-update-set-state': 'off',
    'react/no-unused-prop-types': 'error',
    'react/no-string-refs': 'error',
    'react/no-children-prop': 'error',
    'react/no-access-state-in-setstate': 'error',
    'react/destructuring-assignment': 'off',
    'react/button-has-type': 'error',
    'react/sort-prop-types': ['error', {
      sortShapeProp: true,
      requiredFirst: true,
      noSortAlphabetically: true,
    }],
    'react/sort-comp': ['error', {
      order: [
        'static-methods',
        'lifecycle',
        'render',
        'everything-else',
      ],
    }],
    'react/jsx-wrap-multilines': ['error', {
      arrow: 'parens-new-line',
      return: 'parens-new-line',
      assignment: 'parens-new-line',
      declaration: 'parens-new-line',
    }],
    'react/jsx-closing-bracket-location': ['error', {
      nonEmpty: 'after-props',
      selfClosing: 'after-props',
    }],

  },
};
